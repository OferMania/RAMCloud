#!/bin/bash -eux
# Build the primary RAMCloud binaries and libraries.

function die {
   echo "${1}"
   exit 1
}

# Command-line Defaults.
DEBUG=no
DEBUG_OPT=no
PATCH=1
PATCH_HINT="Unable to refresh inner RAMCloud directory.\
 Please either use --nopatch, or make sure any current\
 inner RAMCloud changes are saved in a stg patch,\
 git commit, or git stash"

# Parse command line.
while [[ ${#} -gt 0 ]]; do
  KEY="${1}"
  case ${KEY} in
    --help)
      echo "Usage: ${0} [--debug] [--debug-opt]"
      echo
      echo "  --debug     -- Enable DEBUG=yes on the build. Required for unit tests."
      echo "  --debug-opt -- Disable optimizations (-O0) on debug builds."
      echo "  --nopatch   -- Don't patch inner RAMCloud directory"
      exit 0
      ;;
    --debug)
      DEBUG=yes
      shift 1
      ;;
    --debug-opt)
      DEBUG_OPT=yes
      shift 1
      ;;
    --nopatch)
      PATCH=0
      shift 1
      ;;
    *)
      echo "Unrecognized option: ${KEY}"
      exit 1
      ;;
  esac
done

# If we're not running as root then try to run as root.
if [[ ${EUID} -ne 0 ]]; then
  echo "Rerunning script as root."
  CURRENT_SCRIPT="$(readlink --canonicalize-existing "${0}")"
  exec sudo --preserve-env bash "${CURRENT_SCRIPT}"
fi

cd /src
if [[ ! -d RAMCloud ]]; then
  # Get the patched RAMCloud source if it does not already exist.
  ./config/patch
elif [[ ${PATCH} -eq 1 ]]; then
  # Refresh inner RAMCloud with any new patches from patches/series,
  # but don't remove any existing patches. Show PATCH_HINT if
  # something went wrong.
  cd RAMCloud
  stg import --series -i ../patches/series || { 
    echo "${PATCH_HINT}"
    exit 1
  }
fi
cd /src/RAMCloud

# Build RAMCloud.
rm -rf install
BUILD_OPTS="DEBUG=${DEBUG} DEBUG_OPT="${DEBUG_OPT}" GLIBCXX_USE_CXX11_ABI=yes EXTRACXXFLAGS='-Wno-error'"
BUILD_OPTS_DPDK="DPDK=no"
BUILD_OPTS_EXTRALIBS="-lpcap -libverbs -lmnl -lmlx5"
# -lIPSec_MB
BUILD_OPTS="${BUILD_OPTS} ${BUILD_OPTS_DPDK} EXTRALIBS='${BUILD_OPTS_EXTRALIBS}'"

if [[ ${MAKEFLAGS-"unset"} == "unset" ]]; then
  MAKEFLAGS="-j$(( $(nproc) + 1 ))"
fi
eval MAKEFLAGS=${MAKEFLAGS} make install ${BUILD_OPTS} || die "Failed to build RAMCloud"

# Rename the binaries to something a little more descriptive.
mv install/bin/coordinator install/bin/rc-coordinator
mv install/bin/client      install/bin/rc-client
mv install/bin/server      install/bin/rc-server

# Move the libraries to the correct place instead of in the ramcloud subdirectory.
mv install/lib/ramcloud/* install/lib && rmdir install/lib/ramcloud || die "Failed to move RAMCloud libraries"

# Copy install/bin and install/lib to /usr/local for convenience reasons
cp install/bin/rc-* /usr/local/bin
cp -rf install/lib /usr/local/lib

# Build the proto files so we can read what RAMCloud puts in ZooKeeper.
cd src
PROTO_OUT=/src/RAMCloud/bindings/python
for proto_file in $(ls *.proto); do
  python3 -m grpc_tools.protoc -I. --python_out=${PROTO_OUT} --grpc_python_out=${PROTO_OUT} ${proto_file}
done
